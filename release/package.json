{
  "name": "Ionide-fsharp",
  "version": "2.32.0",
  "publisher": "Ionide",
  "contributors": [
    {
      "name": "Krzysztof Cie≈õlak",
      "url": "https://twitter.com/k_cieslak"
    }
  ],
  "description": "F# Language Support",
  "categories": [
    "Linters",
    "Languages",
    "Snippets"
  ],
  "license": "SEE LICENSE IN LICENSE.md",
  "icon": "images/logo.png",
  "bugs": {
    "url": "https://github.com/ionide/ionide-vscode-fsharp/issues"
  },
  "homepage": "http://ionide.io",
  "repository": {
    "type": "git",
    "url": "https://github.com/ionide/ionide-vscode-fsharp.git"
  },
  "engines": {
    "vscode": "^0.10.0"
  },
  "main": "./fsharp",
  "contributes": {
    "languages": [
      {
        "id": "fsharp",
        "aliases": [
          "F#",
          "FSharp",
          "fsharp"
        ],
        "extensions": [
          ".fs",
          ".fsx",
          ".fsi"
        ],
        "configuration": "./language-configuration.json"
      }
    ],
    "grammars": [
      {
        "language": "fsharp",
        "scopeName": "source.fsharp",
        "path": "./syntaxes/fsharp.json"
      },
      {
        "language": "fsharp",
        "scopeName": "source.fsharp.fsx",
        "path": "./syntaxes/fsharp.fsx.json"
      },
      {
        "language": "fsharp",
        "scopeName": "source.fsharp.fsi",
        "path": "./syntaxes/fsharp.fsi.json"
      },
      {
        "language": "fsharp",
        "scopeName": "source.fsharp.fsl",
        "path": "./syntaxes/fsharp.fsl.json"
      }
    ],
    "commands": [
      {
        "command": "fsi.Start",
        "title": "FSI: Start"
      },
      {
        "command": "fsi.SendLine",
        "title": "FSI: Send Line"
      },
      {
        "command": "fsi.SendSelection",
        "title": "FSI: Send Selection"
      },
      {
        "command": "fsi.SendLastSelection",
        "title": "FSI: Send Last Selection"
      },
      {
        "command": "fsi.SendFile",
        "title": "FSI: Send File"
      },
      {
        "command": "fsi.SendProjectReferences",
        "title": "FSI: Send References from project"
      },
      {
        "command": "fsi.GenerateProjectReferences",
        "title": "FSI: Generate script file with references from project"
      },
      {
        "command": "fsharp.MoveFileUp",
        "title": "F#: Move File Up"
      },
      {
        "command": "fsharp.MoveFileDown",
        "title": "F#: Move File Down"
      },
      {
        "command": "fsharp.NewProject",
        "title": "F#: New Project"
      },
      {
        "command": "fsharp.NewProjectNoFake",
        "title": "F#: New Project (Without FAKE)"
      },
      {
        "command": "fsharp.NewProjectScaffold",
        "title": "F#: New Project (ProjectScaffold)"
      },
      {
        "command": "fsharp.RefreshProjectTemplates",
        "title": "F#: Refresh Project Templates"
      },
      {
        "command": "fsharp.AddFileToProject",
        "title": "F#: Add Current File To Project"
      },
      {
        "command": "fsharp.RemoveFileFromProject",
        "title": "F#: Remove Current File From Project"
      },
      {
        "command": "fsharp.AddProjectReference",
        "title": "F#: Add Project Reference"
      },
      {
        "command": "fsharp.RemoveProjectReference",
        "title": "F#: Remove Project Reference"
      },
      {
        "command": "fsharp.AddReference",
        "title": "F#: Add Reference"
      },
      {
        "command": "fsharp.RemoveReference",
        "title": "F#: Remove Reference"
      },
      {
        "command": "fsharp.getHelp",
        "title": "F#: Get Help"
      },
      {
        "command": "fsharp.generateDoc",
        "title": "F#: Generate Documentation"
      },
      {
        "command": "fsharp.clearCache",
        "title": "F#: Clear Cache"
      },
      {
        "command": "Expecto.run",
        "title": "Expecto: Run"
      },
      {
        "command": "Expecto.runSingle",
        "title": "Expecto: Run Single"
      },
      {
        "command": "Expecto.runList",
        "title": "Expecto: Run List"
      },
      {
        "command": "Expecto.runFailed",
        "title": "Expecto: Run Failed"
      },
      {
        "command": "Expecto.startWatchMode",
        "title": "Expecto: Start Watch Mode"
      },
      {
        "command": "Expecto.stopWatchMode",
        "title": "Expecto: Stop Watch Mode"
      },
      {
        "command": "MSBuild.buildCurrent",
        "title": "MSBuild: Build current project"
      },
      {
        "command": "MSBuild.buildSelected",
        "title": "MSBuild: Build project"
      },
      {
        "command": "MSBuild.rebuildCurrent",
        "title": "MSBuild: Rebuild current project"
      },
      {
        "command": "MSBuild.rebuildSelected",
        "title": "MSBuild: Rebuild project"
      },
      {
        "command": "MSBuild.cleanCurrent",
        "title": "MSBuild: Clean current project"
      },
      {
        "command": "MSBuild.cleanSelected",
        "title": "MSBuild: Clean project"
      },
      {
        "command": "MSBuild.restoreSelected",
        "title": "MSBuild: Restore project"
      },
      {
        "command": "MSBuild.switchMSbuildHostType",
        "title": "MSBuild: Switch host type"
      },
      {
        "command": "fsharp.explorer.moveUp",
        "title": "Move file up"
      },
      {
        "command": "fsharp.explorer.moveDown",
        "title": "Move file down"
      },
      {
        "command": "fsharp.explorer.removeFile",
        "title": "Remove file"
      },
      {
        "command": "fsharp.explorer.addProjecRef",
        "title": "Add project reference"
      },
      {
        "command": "fsharp.explorer.removeProjecRef",
        "title": "Remove project reference"
      },
      {
        "command": "fsharp.explorer.openProjectFile",
        "title": "Open project file"
      }
    ],
    "views": {
      "explorer": [
        {
          "id": "ionide.projectExplorer",
          "name": "Project Explorer"
        }
      ]
    },
    "menus": {
      "commandPalette": [
        {
          "command": "fsharp.explorer.moveUp",
          "when": "false"
        },
        {
          "command": "fsharp.explorer.moveDown",
          "when": "false"
        },
        {
          "command": "fsharp.explorer.removeFile",
          "when": "false"
        },
        {
          "command": "fsharp.explorer.addProjecRef",
          "when": "false"
        },
        {
          "command": "fsharp.explorer.removeProjecRef",
          "when": "false"
        },
        {
          "command": "fsharp.explorer.openProjectFile",
          "when": "false"
        },
        {
          "command": "fsi.SendLine",
          "when": "editorLangId == 'fsharp'"
        },
        {
          "command": "fsi.SendSelection",
          "when": "editorLangId == 'fsharp'"
        },
        {
          "command": "fsi.SendLastSelection",
          "when": "editorLangId == 'fsharp'"
        },
        {
          "command": "fsi.SendFile",
          "when": "editorLangId == 'fsharp'"
        },
        {
          "command": "fsi.SendProjectReferences",
          "when": "editorLangId == 'fsharp'"
        },
        {
          "command": "fsi.GenerateProjectReferences",
          "when": "editorLangId == 'fsharp'"
        },
        {
          "command": "fsharp.MoveFileUp",
          "when": "editorLangId == 'fsharp'"
        },
        {
          "command": "fsharp.MoveFileDown",
          "when": "editorLangId == 'fsharp'"
        },
        {
          "command": "fsharp.AddFileToProject",
          "when": "editorLangId == 'fsharp'"
        },
        {
          "command": "fsharp.RemoveFileFromProject",
          "when": "editorLangId == 'fsharp'"
        },
        {
          "command": "fsharp.getHelp",
          "when": "editorLangId == 'fsharp'"
        },
        {
          "command": "fsharp.generateDoc",
          "when": "editorLangId == 'fsharp'"
        },
        {
          "command": "MSBuild.buildCurrent",
          "when": "editorLangId == 'fsharp'"
        },
        {
          "command": "MSBuild.rebuildCurrent",
          "when": "editorLangId == 'fsharp'"
        },
        {
          "command": "MSBuild.cleanCurrent",
          "when": "editorLangId == 'fsharp'"
        }
      ],
      "view/title": [
        {
          "command": "fsharp.NewProject",
          "when": "view == ionide.projectExplorer"
        }
      ],
      "view/item/context": [
        {
          "command": "fsharp.explorer.moveUp",
          "when": "view == ionide.projectExplorer && viewItem == ionide.projectExplorer.file"
        },
        {
          "command": "fsharp.explorer.moveDown",
          "when": "view == ionide.projectExplorer && viewItem == ionide.projectExplorer.file"
        },
        {
          "command": "fsharp.explorer.removeFile",
          "when": "view == ionide.projectExplorer && viewItem == ionide.projectExplorer.file"
        },
        {
          "command": "fsharp.explorer.addProjecRef",
          "when": "view == ionide.projectExplorer && viewItem == ionide.projectExplorer.projectRefList"
        },
        {
          "command": "fsharp.explorer.removeProjecRef",
          "when": "view == ionide.projectExplorer && viewItem == ionide.projectExplorer.projRef"
        },
        {
          "command": "fsharp.explorer.openProjectFile",
          "when": "view == ionide.projectExplorer && viewItem == ionide.projectExplorer.project"
        }
      ],
      "editor/context":[
        {
          "command": "fsharp.generateDoc",
          "group": "1_modification",
          "when": "editorTextFocus && editorLangId == 'fsharp'"
        }
      ]
    },
    "outputChannels": [
      "F# Language Service",
      "F# Interactive",
      "Forge",
      "Expecto",
      "MSBuild"
    ],
    "keybindings": [
      {
        "command": "fsi.SendLine",
        "key": "alt+/",
        "mac": "alt+/",
        "when": "editorFocus && !findWidgetVisible && editorLangId == 'fsharp'"
      },
      {
        "command": "fsi.SendSelection",
        "key": "alt+Enter",
        "mac": "alt+Enter",
        "when": "editorFocus && !findWidgetVisible && editorLangId == 'fsharp'"
      },
      {
        "command": "fsharp.MoveFileUp",
        "key": "ctrl+shift+up",
        "when": "editorFocus  && editorLangId == 'fsharp'"
      },
      {
        "command": "fsharp.MoveFileDown",
        "key": "ctrl+shift+down",
        "when": "editorFocus && editorLangId == 'fsharp'"
      },
      {
        "command": "fsharp.generateDoc",
        "key": "alt+shift+j",
        "when": "editorFocus && editorLangId == 'fsharp'"
      },
      {
        "command": "Expecto.run",
        "key": "ctrl+F6",
        "when": "editorFocus && editorLangId == 'fsharp'"
      },
      {
        "command": "Expecto.runFailed",
        "key": "ctrl+alt+F6",
        "when": "editorFocus && editorLangId == 'fsharp'"
      },
      {
        "command": "Expecto.startWatchMode",
        "key": "alt+F6",
        "when": "editorFocus && editorLangId == 'fsharp'"
      },
      {
        "command": "FSharp.getHelp",
        "key": "shift+F1",
        "when": "editorFocus && editorLangId == 'fsharp'"
      },
      {
        "command": "MSBuild.buildCurrent",
        "key": "ctrl+alt+b",
        "when": "editorFocus && editorLangId == 'fsharp'"
      }
    ],
    "configurationDefaults": {
      "[fsharp]": {
        "editor.useTabStops": false
      }
    },
    "configuration": {
      "type": "object",
      "title": "FSharp configuration",
      "properties": {
        "FSharp.logLanguageServiceRequests": {
          "type": "string",
          "default": "output",
          "description": "Enable logging for F# Language Service requests (FSAC) to either an output channel, the developer tools console, or both",
          "enum": [
            "none",
            "output",
            "devconsole",
            "both"
          ]
        },
        "FSharp.logLanguageServiceRequestsOutputWindowLevel": {
          "type": "string",
          "default": "INFO",
          "description": "Set the verbosity for F# Language Service Output Channel",
          "enum": [
            "DEBUG",
            "INFO",
            "WARN",
            "ERROR"
          ]
        },
        "FSharp.automaticProjectModification": {
          "type": "boolean",
          "default": false,
          "description": "Automatically modifies fsproj on file add/remove"
        },
        "FSharp.toolsDirPath": {
          "type": "string",
          "default": "",
          "description": "The directory containing the F# tools"
        },
        "FSharp.monoPath": {
          "type": "string",
          "default": "mono",
          "description": "The path to Mono executable"
        },
        "FSharp.fsiFilePath": {
          "type": "string",
          "default": "",
          "description": "The path to the F# Interactive tool used by Ionide-FSharp"
        },
        "FSharp.keywordsAutocomplete": {
          "type": "boolean",
          "default": true,
          "description": "Includes keywords in autocomplete"
        },
        "FSharp.linter": {
          "type": "boolean",
          "default": true,
          "description": "Enables integration with FSharpLinter (additional warnings)"
        },
        "FSharp.fsiExtraParameters": {
          "type": "array",
          "default": [],
          "description": "Allows to pass extra parameters to FSI process"
        },
        "FSharp.legacyFSI": {
          "type": "boolean",
          "default": false,
          "description": "Allows to use legacy (read-only) version of FSI. Requires restart"
        },
        "FSharp.saveOnSendLastSelection": {
          "type": "boolean",
          "default": false,
          "description": "Save Current file before send LastSelection to FSI"
        },
        "Expecto.runSequenced": {
          "type": "boolean",
          "default": false,
          "description": "Run Expecto tests with `--sequenced` flag"
        },
        "Expecto.runDebug": {
          "type": "boolean",
          "default": false,
          "description": "Run Expecto tests with `--debug` flag"
        },
        "Expecto.runVersion": {
          "type": "boolean",
          "default": false,
          "description": "Run Expecto tests with `--version` flag"
        },
        "Expecto.runFailOnFocusedTests": {
          "type": "boolean",
          "default": false,
          "description": "Run Expecto tests with `--fail-on-focused-tests` flag"
        },
        "Expecto.customArgs": {
          "type": "string",
          "default": "",
          "description": "Run Expecto tests with additional custom arguments"
        },
        "Expecto.autoshow": {
          "type": "boolean",
          "default": true,
          "description": "Automatically shows Expecto output panel"
        },
        "FSharp.msbuildLocation": {
          "type":"string",
          "default":"",
          "description": "Use a specific version of msbuild to build this project."
        },
        "FSharp.msbuildAutoshow": {
          "type":"boolean",
          "default":true,
          "description": "Automatically shows Expecto output panel"
        },
        "FSharp.msbuildHost": {
          "type": "string",
          "default": ".net",
          "description": "MSBuild host",
          "enum": [
            ".net",
            ".net core",
            "ask at first use"
          ]
        },
        "FSharp.resolveNamespaces": {
          "type":"boolean",
          "default": false,
          "description": "Enables `resolve unopened namespaces and modules` code fix. Not stable, can crash FSAC - use at your own risk."
        },
        "FSharp.enableTreeView": {
          "type": "boolean",
          "default": true,
          "description": "Enables solution explorer - experimental feature."
        },
        "FSharp.excludeProjectDirectories": {
          "type":"array",
          "default": [".git", "paket-files"],
          "description": "Directories in the array are excluded from project file search. Requires restart"
        }
      }
    },
    "jsonValidation": [
      {
        "fileMatch": "fableconfig.json",
        "url": "./schemas/fableconfig.json"
      }
    ],
    "breakpoints": [
      {
        "language": "fsharp"
      }
    ],
    "problemMatchers": [
      {
        "name": "fable-webpack",
        "owner": "fsharp",
        "fileLocation": "absolute",
        "background": {
          "activeOnStart": true,
          "beginsPattern":{
              "regexp": "webpack: Compiling"
          },
          "endsPattern":{
              "regexp": "webpack: (Compiled successfully|Failed to compile)"
          }
        },
        "pattern": {
            "regexp": "(.*)\\((\\d+),(\\d+),(\\d+),(\\d+)\\)\\s*:\\s*(warning|error) FABLE\\s*:\\s*(.*)$",
            "file": 1,
            "line": 2,
            "column": 3,
            "endLine": 4,
            "endColumn": 5,
            "severity": 6,
            "message": 7
        }
      }
    ]
  },
  "activationEvents": [
    "workspaceContains:**/*.fs",
    "workspaceContains:**/*.fsx",
    "workspaceContains:**/*.fsproj",
    "onLanguage:fsharp",
    "onCommand:fsi.Start",
    "onCommand:fsharp.NewProject",
    "onCommand:fsharp.NewProjectNoFake",
    "onCommand:fsharp.NewProjectScaffold",
    "onCommand:fsharp.RefreshProjectTemplates"
  ],
  "extensionDependencies": [
    "vscode.fsharp"
  ],
  "scripts": {
    "prebuild":"npm update",
    "build": "fable ../src/Ionide.FSharp.fsproj -o ../release -m commonjs --verbose"
  },
  "dependencies": {
    "axios": "*",
    "fable-core": "0.6.x",
    "toml": "*",
    "ws": "*",
    "xhr2": "*"
  },
  "devDependencies": {
    "fable-compiler": "0.6.x",
    "mocha": "*",
    "vscode": "*"
  }
}
